\ProvidesPackage{mathnote}

% Generic interfaces
\RequirePackage{mathcommand}
\RequirePackage{mathtools}  
% AMS packages
\RequirePackage{amsmath}
\RequirePackage{amsfonts}
\RequirePackage{amssymb}



%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%      FONTS      %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%


\RequirePackage{upgreek}
\RequirePackage{dsfont}
\RequirePackage{euscript}


% Additional fonts and symbols

%% Importing usefull MnSymbol glyphs
%% Source: https://tex.stackexchange.com/questions/450691/create-diamond-with-a-dash-in-it/450703#450703

%%% MnSymbol Font Table
% \fonttable{MnSymbolA12}
% \newpage
% \fonttable{MnSymbolB12}
% \newpage
% \fonttable{MnSymbolC12}
% \newpage
% \fonttable{MnSymbolD12}
% \newpage
% \fonttable{MnSymbolE12}
% \newpage
% \fonttable{MnSymbolF12}


%\def\ImportFromMnSymbol#1{%
%  \DeclareFontFamily{U} {MnSymbol#1}{}
%  \DeclareFontShape{U}{MnSymbol#1}{m}{n}{
%   <-6> MnSymbol#15
%   <6-7> MnSymbol#16
%   <7-8> MnSymbol#17
%   <8-9> MnSymbol#18
%   <9-10> MnSymbol#19
%   <10-12> MnSymbol#110
%   <12-> MnSymbol#112}{}
%  \DeclareFontShape{U}{MnSymbol#1}{b}{n}{
%   <-6> MnSymbol#1-Bold5
%   <6-7> MnSymbol#1-Bold6
%   <7-8> MnSymbol#1-Bold7
%   <8-9> MnSymbol#1-Bold8
%   <9-10> MnSymbol#1-Bold9
%   <10-12> MnSymbol#1-Bold10
%   <12-> MnSymbol#1-Bold12}{}
%  \DeclareSymbolFont{MnSy#1} {U} {MnSymbol#1}{m}{n}
%}
%\newcommand\DeclareMnSymbol[4]{\DeclareMathSymbol{#1}{#2}{MnSy#3}{#4}}
%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%     PATCHES     %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%

% patch for diffuclt opearator limits, etc
\RequirePackage{stackrel}   
% patch for scaleable sums, integrals products etc
\RequirePackage{scalerel} 
\RequirePackage{exscale}
% patch for typographically inline fractions
\RequirePackage{xfrac}
% patch for typographically correct braces
\RequirePackage{mleftright} 
% patch for vector arrows
\RequirePackage[d]{esvect}  


%% mathtools default behaviour is that *-command use auto-scaling
%% while non-* do not. Here we switch behaviour
\newcommand\swapifbranches[3]{#1{#3}{#2}}
\makeatletter
\MHInternalSyntaxOn
\patchcmd{\DeclarePairedDelimiter}{\@ifstar}{\swapifbranches\@ifstar}{}{}
\patchcmd{\DeclarePairedDelimiterXPP}{\@ifstar}{\swapifbranches\@ifstar}{}{}
\MHInternalSyntaxOff
\makeatother

%% Correct bracing in commands
\newmathcommand{\leftoperatorbrace}{\mleft(}
\newmathcommand{\rightoperatorbrace}{\mright)}
\newmathcommand{\leftoperatorbracket}{\mleft[}
\newmathcommand{\rightoperatorbracket}{\mright]}

%% Improve sizing of - and + in supscripts/subscripts
%%%% TODO: improve hardcoring
\newcommand{\medminus}{\mathop{\mathsmaller{-}}}
\newcommand{\medplus}{\mathop{\mathsmaller{+}}}
\newcommand{\pinfty}{{\raisebox{0.05ex}{\scaleobj{0.45}{+}}}\infty}
\newcommand{\ninfty}{{\raisebox{0.05ex}{\scaleobj{0.45}{-}}}\infty}

%% Force usage of \leqslant and \geqslant instead of
%% \leq and \geq
\disablecommand{\leq\geq}
\suggestcommand{\leq}{Use the better looking \leqslant.}
\suggestcommand{\geq}{Use the better looking \geqslant.}


%%%% Introduce some commons  
\let\Proj\relax
\DeclareMathOperator{\Proj}{Proj}
\DeclareMathOperator{\argmax}{argmax}
\DeclareMathOperator{\argmin}{argmin}
\newmathcommand{\loc}{\mathrm{loc}}
\newmathcommand{\const}{\mathrm{const}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% CUSTOM COMMANDS %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%


\ExplSyntaxOn

% Trick to define PIE commands that can absorbs PIE first and only then produce arguments.
% Define your command as usual PIE command (so, PIE's aren't expanded or parsed);
% BUT PIE's will be respectevly #1, #2 and #3 (for details see mathcommand docs).
% Then use this command to allow firstly parse PIEF and only then parse arguments;
\NewDocumentCommand{\piefication}{m}{
    \exp_args:Nc\NewCommandCopy{old_\cs_to_str:N#1}{#1}
    \cs_set:cpn{internal_\cs_to_str:N#1:w}{\exp_args:Nc\__mathcommand_absorb_PIE:nw{old_\cs_to_str:N#1}}
    \exp_args:Nnc\RenewCommandCopy{#1}{internal_\cs_to_str:N#1:w}
}

% \DeclarePairedSplitDelimiter --- same as DeclarePairedDelimiter
% but also alignes vertical bar inside your command, see examples
% of set command. 
%% WARNING:: If you use | inside sush delimeter it will fail. E.g.
%% \set{ x \in \R | |x| > 1}
%% will result in error. Use \lvert and \rvert instead, or abs:
%% \set{ x \in \X | \abs{x} > 1}
\NewDocumentCommand{\DeclarePairedSplitDelimiter}{mmm}{
    %% Firstly we define internal variants in case when there is split, and when there is none
    \exp_args:Nc\DeclarePairedDelimiter{internal_base_\cs_to_str:N#1}{#2}{#3}
    \exp_args:Nc\DeclarePairedDelimiterX{internal_split_\cs_to_str:N#1}[2]{#2}{#3}
    {##1 \nonscript\:\delimsize\vert\allowbreak\nonscript\:\mathopen{} ##2}
    %% Now we create internal version of command
    \exp_args:Nc\NewDocumentCommand{internal_\cs_to_str:N#1}{omm}{
        \IfNoValueTF{##1}{
            \IfNoValueTF{##3}{
                \use:c{internal_base_\cs_to_str:N#1}{##2}
            }{
                \use:c{internal_split_\cs_to_str:N#1}{##2}{##3}
            }
        }{
            \IfNoValueTF{##3}{
                \use:c{internal_base_\cs_to_str:N#1}*[##1]{##2}
            }{
                \use:c{internal_split_\cs_to_str:N#1}*[##1]{##2}{##3}
            }
        }
    }
    %% Finaly, create latex2e interface
    \NewDocumentCommand{#1}{o >{\SplitArgument{1}{|} } m}{
        \IfNoValueTF{##1}{
            \use:c{internal_\cs_to_str:N#1}##2
        }{
            \use:c{internal_\cs_to_str:N#1}[##1]##2
        }
    }
}

% \NewTemplateCommand creates a template-macro
% \TemplateInstance specifies template-args
\NewDocumentCommand{\NewTemplateCommand}{m r<> m m}{\NewDocumentCommand{#1}{#2#3}{#4}}
\NewDocumentCommand{\TemplateInstance}{m m  >{\SplitList {,}}r<>}{\NewDocumentCommand{#1}{}{#2#3}}
\NewDocumentCommand{\TemplateInstancePIE}{m m  >{\SplitList {,}}r<>}{\NewDocumentCommand{#1}{}{#2#3}\piefication{#1}}

\ExplSyntaxOff

%%%%%%%%%%%%%%%%%%%%%
%% Custom commands %%
%%%%%%%%%%%%%%%%%%%%%


% %%%% Some enhancements
% \newmathcommand{\eqdef}{%
%     \mathrel{{\stackrel{\mbox{\tiny def}}{=}}}%
% }

% % Inline fraction
% \newmathcommand{\lfrac}[2]{#1 / #2}

% % Shortcuts for math mode
% \renewmathcommand{\i}{\imath}
% \renewmathcommand{\j}{\jmath}

% Bigger operators
%\sum_{}^{f}[[ ]]\mleft(....\mright.'

\ExplSyntaxOn
\NewTemplateCommand\tmpl_scalable_operation<m>{mmmd''}{
    \IfNoValueTF{#5}{
        #1\limits#3#4#2
    }{
        \scalerel{#1\limits#3#4#2}{#5}
    }
}
\TemplateInstancePIEsum\tmpl_scalable_operation<\sum_symbol>
\TemplateInstancePIE\int\tmpl_scalable_operation<\int_symbol>
\TemplateInstancePIE\prod\tmpl_scalable_operation<\prod_symbol>

\ExplSyntaxOff

%%%%%%%%%%%%%%%%%%%
%% Math commands %%
%%%%%%%%%%%%%%%%%%%

%%%%
%% Foundations: Logic, set theory, topology %%
%%%%

%%%% Logic
\newmathcommand{\excludeor}{\mathbin{\star}}

%%%% Set theory
\DeclarePairedSplitDelimiter{\set}{\{}{\}}
% Class is a collection of sets
\newmathcommand{\class}[1]{\set{#1}}
% Class of all sets and class of all inductive sets
\newmathcommand{\UniversalClass}{\mathfrak{V}}
\newmathcommand{\InductiveClass}{\mathrm{Ind}}
% Cardinality of a set
\DeclareMathOperator{\card}{card}
% Use \varnothing as notation for empty set
\disablecommand{\emptyset}
\suggestcommand{\emptyset}{Use the better looking \varnothing.}
% Some operations on sets
\let\setminus\relax
\let\complement\relax
\newmathcommand{\setminus}{\mathbin{\circleddash}}
\newmathcommand{\symdiff}{\mathbin{\triangle}}
\NewCommandCopy{\compl}{\complement}
\newmathcommand{\complement}[1]{\overline{#1}}
\DeclareMathOperator{\powerset}{\mathcal{P}}
% Functions and relations
\let\im\relax
\let\ker\relax
\DeclareMathOperator{\im}{im}   % image
\DeclareMathOperator{\dom}{dom} % domain
\DeclareMathOperator{\cod}{cod} % codomain
\DeclareMathOperator{\ran}{ran} % range (same as codomain)
\DeclareMathOperator{\ker}{ker} % kernel
\DeclareMathOperator{\field}{field} % field of relation
% Standart mappings
\DeclareMathOperator{\id}{id} % identity
\DeclareMathOperator{\ind}{\mathds{1}} % indicator function
% Injective, surjective and bijective mappings
\newmathcommand{\injto}{\hookrightarrow}
\newmathcommand{\surto}{\twoheadrightarrow}
\newmathcommand{\bijto}{\leftrightarrow}

%%%% Topology
\DeclareMathOperator{\Cl}{Cl}   % closure
\DeclareMathOperator{\Fr}{Fr}   % boundary
\DeclareMathOperator{\Int}{Int} % interior
\DeclareMathOperator{\Out}{Out} % outerior
\DeclareMathOperator{\Hom}{Hom} % Hom-sets
\newmathcommand{\Borel}{\mathcal{B}}     % Algebra of borel sets
\newmathcommand{\Cylindr}{\mathcal{C}} % Cylindirc set builded from given algebra


%%%%
%% Algebra
%%%%

%%%% Complex numbers
\let\Re=\undefined
\let\Im=\undefined
\newmathcommand{\Re}{\mathop{\mathrm{Re}}}  % Real part
\newmathcommand{\Im}{\mathop{\mathrm{Im}}}  % Imaginary part
\newmathcommand{\conj}[1]{\overline{#1}}    % Complex conjugate
\DeclarePairedDelimiter\abs{\lvert}{\rvert} % Absolute value

%%%% Basic algebraic structures
\newcommand*{\bbstruct}[1]{\mathbb{#1}}
\newmathcommand{\N}{\bbstruct{N}}
\newmathcommand{\Z}{\bbstruct{Z}}
\newmathcommand{\Q}{\bbstruct{Q}}
\newmathcommand{\R}{\bbstruct{R}}
\newmathcommand{\C}{\bbstruct{C}}
\ifdefined\H%
    \renewmathcommand{\H}{\bbstruct{H}}
\else
    \newmathcommand{\H}{\bbstruct{H}}
\fi

%%%% Linear algebra:
% norm, scalar and cross product
\DeclarePairedDelimiterX\norm[1]\lVert\rVert{\ifblank{#1}{\:\cdot\:}{#1}} % Vector norm
\DeclarePairedDelimiterX\spr[2]{\langle}{\rangle}{\ifblank{#1}{\:\cdot\:}{#1},\ifblank{#2}{\:\cdot\:}{#2}} % Scalar product
\DeclarePairedDelimiterX\cpr[2]{\lbrack}{\rbrack}{\ifblank{#1}{\:\cdot\:}{#1},\ifblank{#2}{\:\cdot\:}{#2}} % Cross product
% Changing \vv to \vec and generating shorthands for vectors:
% \va is \vec{a}, \vb is \vec{b} and so on
\RenewCommandCopy{\vec}{\vv}
\let\vv\relax
\LoopCommands{abcdefghklmnopqrstuvwxyz}[v#1]{\newmathcommand#2{\vec{#1}}}
\newmathcommand{\vi}{\vec{\imath}}
\newmathcommand{\vj}{\vec{\jmath}}
% matrix operations
\DeclareMathOperator{\tr}{tr}     % trace
\DeclareMathOperator{\rk}{rank}   % rank
\DeclareMathOperator{\perm}{perm} % permament
% direct sum and tensor product
\newmathcommand{\tsum}{\oplus}   % direct sum
\newmathcommand{\tprod}{\otimes} % tensorproduct


%%%% Number theory
% gcd, lcm
\let\gcd\relax
\DeclareMathOperator{\gcd}{gcd} % Greatest common divisior
\DeclareMathOperator{\lcm}{lcm} % lowest common multiple
% Paired delimeters for ceil and floor
\DeclarePairedDelimiter{\ceil}{\lceil}{\rceil}     
\DeclarePairedDelimiter{\floor}{\lfloor}{\rfloor}  


%%%%
%% Calcus
%%%%

%%%% Commons
\DeclarePairedDelimiterX\interval[2]{\langle}{\rangle}{#1;#2} % interval
\DeclareMathOperator{\sign}{sign}   % signum function
\DeclareMathOperator{\supp}{supp}   % funtction support
\newmathcommand{\dif}{\mathop{}\!d} % Small differntial
\newmathcommand{\Dif}{\mathop{}\!D} % Big differntial

%%%% Derivative fractions
\ExplSyntaxOn
% Generic template
\NewTemplateCommand\tmpl_derivative_frac<mm>{mmm mm}{
    \IfEmptyTF{#3}{#2{#1#5#6}{#1#7#5#4}}{\PackageError{Primes are not allowed to be before \verb|od|-like commands}}
}

\TemplateInstance\od\tmpl_derivative_frac<\dif, \frac>
\piefication{\od}
\TemplateInstance\lod\tmpl_derivative_frac<\dif, \sfrac>
\piefication{\lod}
\TemplateInstance\tod\tmpl_derivative_frac<\dif, \tfrac>
\piefication{\tod}
\TemplateInstance\dod\tmpl_derivative_frac<\dif, \dfrac>
\piefication{\dod}

\TemplateInstance\pd\tmpl_derivative_frac<\partial, \frac>
\piefication{\pd}
\TemplateInstance\lpd\tmpl_derivative_frac<\partial, \sfrac>
\piefication{\lpd}
\TemplateInstance\tpd\tmpl_derivative_frac<\partial, \tfrac>
\piefication{\tpd}
\TemplateInstance\dpd\tmpl_derivative_frac<\partial, \dfrac>
\piefication{\dpd}
\ExplSyntaxOff


%%%% Multivariable derivatives
\let\div\relax
\DeclareMathOperator{\grad}{grad}
\DeclareMathOperator{\rot}{rot}
\DeclareMathOperator{\div}{div}

%% Combinatorics

% Binomial with repetiions
% Falling factorials
% 

%% Probability and statistics
\DeclarePairedSplitDelimiter{\BracesSplit}()
\DeclarePairedSplitDelimiter{\BraketSplit}[]

% Template for \P-like commands
\NewDocumentCommand{\ConditionalFunctional}{mm}{
    \NewDocumentCommand{#1}{mmm d()}{
        \IfNoValueTF{##4}{#2##1##2##3}{#2##1##2##3\BracesSplit{##4}}
    }
    \piefication{#1}
}
% Template for \E-like commands
\NewDocumentCommand{\ConditionalFunctionalOperator}{mm}{
    \NewDocumentCommand{#1}{mmm d[]}{
        \IfNoValueTF{##4}{#2##1##2##3}{#2##1##2##3\BraketSplit{##4}}
    }
    \piefication{#1}
}
\let\P\relax 
\ConditionalFunctional{\P}{\mathbb{P}}
\ConditionalFunctional{\Law}{\mathrm{Law}}
\ConditionalFunctionalOperator{\E}{\mathbb{E}}
\ConditionalFunctionalOperator{\D}{\mathbb{D}}
\ConditionalFunctionalOperator{\Skew}{\mathrm{skew}}
\ConditionalFunctionalOperator{\Kurt}{\mathrm{kurt}}
\ConditionalFunctionalOperator{\Median}{\mathrm{median}}
% Covariance operator
\DeclarePairedDelimiterX\covbraces[2](){#1,#2} 
\newmathcommand{\Cov}[2]{\mathrm{Cov}\covbraces{#1}{#2}}
% Common scripts
\newmathcommand{\Uniform}{\mathcal{U}}
\newmathcommand{\Normal}{\mathcal{N}}
\newmathcommand{\Poiss}{\mathrm{Poiss}}
\newmathcommand{\Exp}{\mathrm{Exp}}
